<?xml version="1.0" encoding="UTF-8"?>
<test-data
    xmlns="http://pmd.sourceforge.net/rule-tests"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pmd.sourceforge.net/rule-tests http://pmd.sourceforge.net/rule-tests_1_0_0.xsd">

    <test-code>
        <description>Failure case: Empty Catch Block</description>
        <expected-problems>1</expected-problems>
        <code><![CDATA[
public class Foo {
    public void bar() {
        try {
            system.debug(1);
        } catch(Exception e) {
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>Success case: Empty Catch Block</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
public class Foo {
    public void foo() {
        try {
            system.debug(1);
        } catch(Exception e) {
            system.debug(e);
        }
    }
}
        ]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowExceptionNameRegex, negative test unspecified</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7,16</expected-linenumbers>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowExceptionNameRegex, negative test specified</description>
        <rule-property name="allowExceptionNameRegex">ignoreMe</rule-property>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7,16</expected-linenumbers>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception expected) {
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception ignored) {
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowExceptionNameRegex, positive test unspecified</description>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception expected) {
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception ignored) {
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowExceptionNameRegex, positive test specified</description>
        <rule-property name="allowExceptionNameRegex">ignoreMe</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception ignoreMe) {
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception ignoreMe) {
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowCommentedBlocks, negative test unspecified/default</description>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7,17</expected-linenumbers>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowCommentedBlocks, negative test specified</description>
        <rule-property name="allowCommentedBlocks">false</rule-property>
        <expected-problems>2</expected-problems>
        <expected-linenumbers>7,17</expected-linenumbers>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowCommentedBlocks, positive test</description>
        <rule-property name="allowCommentedBlocks">true</rule-property>
        <expected-problems>0</expected-problems>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }

    @IsTest
    static void testWithAnnotation() {
        try {
            doSomethingThatShouldThrowAnException();
            System.assert(false, 'Expected an exception to be thrown.');
        } catch (Exception e) {
            // Expected
        }
    }
}
]]></code>
    </test-code>

    <test-code>
        <description>#3569 - Verify use of allowCommentedBlocks, binary search boundaries verification</description>
        <rule-property name="allowCommentedBlocks">true</rule-property>
        <expected-problems>6</expected-problems>
        <expected-linenumbers>10,14,18,22,25,29</expected-linenumbers>
        <code><![CDATA[
@IsTest
private class FunctionalityTest {
    static testMethod void testWithModifier() {
        try {
        } catch (Exception e) {
          // Inside of catch block; should not be reported
        }

        try {
        } /* Outside of catch block; should not be found; should be reported */ catch (Exception e) {
        }

        try {
        } catch (Exception e) { // Inside of catch block but on same line as begin; should be found but currently isn't; should be reported
        }

        try {
        } catch (Exception e) {
        /* Inside of catch block but on same line as end; should be found but currently isn't; should be reported */ }

        try {
        } catch (Exception e5) { /* Inside of catch block but on same line as begin/end; should be found but currently isn't; should be reported */ }

        try {
        } catch (Exception e) { // Inside of catch block but on same line as begin; should be found but currently isn't; should be reported
        }

        try {
        } catch (Exception e) {
        } // Outside of catch block; should not be found; should be reported
    }
}
]]></code>
    </test-code>
</test-data>
